name: DAST Security Scan

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  dast:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      security-events: write
      contents: read
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: link_shortener_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
      - name: Install dependencies
        run: go mod download
      - name: Apply database migrations
        env:
          PGPASSWORD: postgres
        run: |
          psql -h localhost -U postgres -d link_shortener_test -f migrations/001_create_users_table.sql
          psql -h localhost -U postgres -d link_shortener_test -f migrations/002_create_links_table.sql
          psql -h localhost -U postgres -d link_shortener_test -f migrations/003_create_link_clicks_table.sql
      - name: Start application
        env:
          APP_PORT: 8080
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: link_shortener_test
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_SSL_MODE: disable
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          REDIS_PASSWORD: ""
          REDIS_DB: 0
          JWT_SECRET: test-secret-key
          BASE_URL: http://localhost:8080
          APP_ENV: development
          APP_DEBUG: true
          LOG_LEVEL: debug
          RATE_LIMIT_REQUESTS: 10000
          CORS_ALLOW_ORIGINS: "http://localhost:8080"
          CORS_ALLOW_METHODS: GET,POST,PUT,DELETE,OPTIONS,PATCH
          CORS_ALLOW_HEADERS: Origin,Content-Type,Accept,Authorization  
        run: |
          nohup go run cmd/api/main.go &
          sleep 10
          curl -f http://localhost:8080/health || exit 1
      - name: Setup test data
        run: |
          RESPONSE=$(curl -s -X POST http://localhost:8080/api/v1/auth/register \
            -H "Content-Type: application/json" \
            -d '{"email": "test@example.com", "password": "StrongP@ss1"}')
          JWT=$(echo $RESPONSE | jq -r '.token')
          echo "JWT_TOKEN=$JWT" >> $GITHUB_ENV
      - name: Run ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.12.0
        with:
          target: 'http://localhost:8080'
          cmd_options: '-J report_json.json -w report_md.md -r report_html.html --no-issue'
      - name: Upload ZAP Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-reports
          path: |
            report_json.json
            report_md.md
            report_html.html
      - name: Upload ZAP SARIF (if generated)
        if: always() && exists('zap.sarif')
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: zap.sarif
